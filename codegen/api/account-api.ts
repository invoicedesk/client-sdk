/* tslint:disable */
/* eslint-disable */
/**
 * Invoice Desk API Documentation
 * Official API documentation for Invoice Desk
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from '../configuration';
import type { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// URLSearchParams not necessarily used
// @ts-ignore
import { URL, URLSearchParams } from 'url';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { CreateApiTokenResponse } from '../models';
// @ts-ignore
import { Payload } from '../models';
/**
 * AccountApi - axios parameter creator
 * @export
 */
export const AccountApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Create an API access token with an expiry date
         * @summary Create API token
         * @param {Payload} payload 
         * @param {string} accountId Account ID to which the company belongs
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createApiToken: async (payload: Payload, accountId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'payload' is not null or undefined
            assertParamExists('createApiToken', 'payload', payload)
            // verify required parameter 'accountId' is not null or undefined
            assertParamExists('createApiToken', 'accountId', accountId)
            const localVarPath = `/accounts/{accountId}/api-token`
                .replace(`{${"accountId"}}`, encodeURIComponent(String(accountId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(payload, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * AccountApi - functional programming interface
 * @export
 */
export const AccountApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = AccountApiAxiosParamCreator(configuration)
    return {
        /**
         * Create an API access token with an expiry date
         * @summary Create API token
         * @param {Payload} payload 
         * @param {string} accountId Account ID to which the company belongs
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createApiToken(payload: Payload, accountId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CreateApiTokenResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createApiToken(payload, accountId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * AccountApi - factory interface
 * @export
 */
export const AccountApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = AccountApiFp(configuration)
    return {
        /**
         * Create an API access token with an expiry date
         * @summary Create API token
         * @param {AccountApiCreateApiTokenRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createApiToken(requestParameters: AccountApiCreateApiTokenRequest, options?: AxiosRequestConfig): AxiosPromise<CreateApiTokenResponse> {
            return localVarFp.createApiToken(requestParameters.payload, requestParameters.accountId, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for createApiToken operation in AccountApi.
 * @export
 * @interface AccountApiCreateApiTokenRequest
 */
export interface AccountApiCreateApiTokenRequest {
    /**
     * 
     * @type {Payload}
     * @memberof AccountApiCreateApiToken
     */
    readonly payload: Payload

    /**
     * Account ID to which the company belongs
     * @type {string}
     * @memberof AccountApiCreateApiToken
     */
    readonly accountId: string
}

/**
 * AccountApi - object-oriented interface
 * @export
 * @class AccountApi
 * @extends {BaseAPI}
 */
export class AccountApi extends BaseAPI {
    /**
     * Create an API access token with an expiry date
     * @summary Create API token
     * @param {AccountApiCreateApiTokenRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AccountApi
     */
    public createApiToken(requestParameters: AccountApiCreateApiTokenRequest, options?: AxiosRequestConfig) {
        return AccountApiFp(this.configuration).createApiToken(requestParameters.payload, requestParameters.accountId, options).then((request) => request(this.axios, this.basePath));
    }
}
