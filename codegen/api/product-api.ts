/* tslint:disable */
/* eslint-disable */
/**
 * Invoice Desk API Documentation
 * Official API documentation for Invoice Desk
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from '../configuration';
import type { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// URLSearchParams not necessarily used
// @ts-ignore
import { URL, URLSearchParams } from 'url';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { CreateProductRequestBody } from '../models';
// @ts-ignore
import { CreateProductResponse } from '../models';
// @ts-ignore
import { DeleteProductRequest } from '../models';
// @ts-ignore
import { DeleteProductResponse } from '../models';
// @ts-ignore
import { ListProductsResponse } from '../models';
// @ts-ignore
import { UpdateProductRequestBody } from '../models';
// @ts-ignore
import { UpdateProductResponse } from '../models';
/**
 * ProductApi - axios parameter creator
 * @export
 */
export const ProductApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Add a new product to a company
         * @summary Add product
         * @param {CreateProductRequestBody} createProductRequestBody 
         * @param {string} accountId Account ID to which the company belongs
         * @param {string} companyId Company ID for which to create a product
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createProduct: async (createProductRequestBody: CreateProductRequestBody, accountId: string, companyId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'createProductRequestBody' is not null or undefined
            assertParamExists('createProduct', 'createProductRequestBody', createProductRequestBody)
            // verify required parameter 'accountId' is not null or undefined
            assertParamExists('createProduct', 'accountId', accountId)
            // verify required parameter 'companyId' is not null or undefined
            assertParamExists('createProduct', 'companyId', companyId)
            const localVarPath = `/accounts/{accountId}/companies/{companyId}/products`
                .replace(`{${"accountId"}}`, encodeURIComponent(String(accountId)))
                .replace(`{${"companyId"}}`, encodeURIComponent(String(companyId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(createProductRequestBody, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Remove a product from a company.
         * @summary Remove a product
         * @param {DeleteProductRequest} deleteProductRequest 
         * @param {string} accountId Account ID to which the company belongs
         * @param {string} companyId Company ID for which to create a product
         * @param {string} productId Product ID to delete
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteProduct: async (deleteProductRequest: DeleteProductRequest, accountId: string, companyId: string, productId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'deleteProductRequest' is not null or undefined
            assertParamExists('deleteProduct', 'deleteProductRequest', deleteProductRequest)
            // verify required parameter 'accountId' is not null or undefined
            assertParamExists('deleteProduct', 'accountId', accountId)
            // verify required parameter 'companyId' is not null or undefined
            assertParamExists('deleteProduct', 'companyId', companyId)
            // verify required parameter 'productId' is not null or undefined
            assertParamExists('deleteProduct', 'productId', productId)
            const localVarPath = `/accounts/{accountId}/companies/{companyId}/products/{productId}`
                .replace(`{${"accountId"}}`, encodeURIComponent(String(accountId)))
                .replace(`{${"companyId"}}`, encodeURIComponent(String(companyId)))
                .replace(`{${"productId"}}`, encodeURIComponent(String(productId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(deleteProductRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get all products for a company
         * @summary List products
         * @param {string} accountId Account ID to which the company belongs
         * @param {string} companyId Company ID for which to list products
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listProducts: async (accountId: string, companyId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'accountId' is not null or undefined
            assertParamExists('listProducts', 'accountId', accountId)
            // verify required parameter 'companyId' is not null or undefined
            assertParamExists('listProducts', 'companyId', companyId)
            const localVarPath = `/accounts/{accountId}/companies/{companyId}/products`
                .replace(`{${"accountId"}}`, encodeURIComponent(String(accountId)))
                .replace(`{${"companyId"}}`, encodeURIComponent(String(companyId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Update an existing product for a company
         * @summary Update a product
         * @param {UpdateProductRequestBody} updateProductRequestBody 
         * @param {string} accountId Account ID to which the company belongs
         * @param {string} companyId Company ID for which to create a product
         * @param {string} productId Product ID to update
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateProduct: async (updateProductRequestBody: UpdateProductRequestBody, accountId: string, companyId: string, productId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'updateProductRequestBody' is not null or undefined
            assertParamExists('updateProduct', 'updateProductRequestBody', updateProductRequestBody)
            // verify required parameter 'accountId' is not null or undefined
            assertParamExists('updateProduct', 'accountId', accountId)
            // verify required parameter 'companyId' is not null or undefined
            assertParamExists('updateProduct', 'companyId', companyId)
            // verify required parameter 'productId' is not null or undefined
            assertParamExists('updateProduct', 'productId', productId)
            const localVarPath = `/accounts/{accountId}/companies/{companyId}/products/{productId}`
                .replace(`{${"accountId"}}`, encodeURIComponent(String(accountId)))
                .replace(`{${"companyId"}}`, encodeURIComponent(String(companyId)))
                .replace(`{${"productId"}}`, encodeURIComponent(String(productId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(updateProductRequestBody, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ProductApi - functional programming interface
 * @export
 */
export const ProductApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = ProductApiAxiosParamCreator(configuration)
    return {
        /**
         * Add a new product to a company
         * @summary Add product
         * @param {CreateProductRequestBody} createProductRequestBody 
         * @param {string} accountId Account ID to which the company belongs
         * @param {string} companyId Company ID for which to create a product
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createProduct(createProductRequestBody: CreateProductRequestBody, accountId: string, companyId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CreateProductResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createProduct(createProductRequestBody, accountId, companyId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Remove a product from a company.
         * @summary Remove a product
         * @param {DeleteProductRequest} deleteProductRequest 
         * @param {string} accountId Account ID to which the company belongs
         * @param {string} companyId Company ID for which to create a product
         * @param {string} productId Product ID to delete
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteProduct(deleteProductRequest: DeleteProductRequest, accountId: string, companyId: string, productId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DeleteProductResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteProduct(deleteProductRequest, accountId, companyId, productId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Get all products for a company
         * @summary List products
         * @param {string} accountId Account ID to which the company belongs
         * @param {string} companyId Company ID for which to list products
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listProducts(accountId: string, companyId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ListProductsResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listProducts(accountId, companyId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Update an existing product for a company
         * @summary Update a product
         * @param {UpdateProductRequestBody} updateProductRequestBody 
         * @param {string} accountId Account ID to which the company belongs
         * @param {string} companyId Company ID for which to create a product
         * @param {string} productId Product ID to update
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateProduct(updateProductRequestBody: UpdateProductRequestBody, accountId: string, companyId: string, productId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<UpdateProductResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateProduct(updateProductRequestBody, accountId, companyId, productId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * ProductApi - factory interface
 * @export
 */
export const ProductApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = ProductApiFp(configuration)
    return {
        /**
         * Add a new product to a company
         * @summary Add product
         * @param {ProductApiCreateProductRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createProduct(requestParameters: ProductApiCreateProductRequest, options?: AxiosRequestConfig): AxiosPromise<CreateProductResponse> {
            return localVarFp.createProduct(requestParameters.createProductRequestBody, requestParameters.accountId, requestParameters.companyId, options).then((request) => request(axios, basePath));
        },
        /**
         * Remove a product from a company.
         * @summary Remove a product
         * @param {ProductApiDeleteProductRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteProduct(requestParameters: ProductApiDeleteProductRequest, options?: AxiosRequestConfig): AxiosPromise<DeleteProductResponse> {
            return localVarFp.deleteProduct(requestParameters.deleteProductRequest, requestParameters.accountId, requestParameters.companyId, requestParameters.productId, options).then((request) => request(axios, basePath));
        },
        /**
         * Get all products for a company
         * @summary List products
         * @param {ProductApiListProductsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listProducts(requestParameters: ProductApiListProductsRequest, options?: AxiosRequestConfig): AxiosPromise<ListProductsResponse> {
            return localVarFp.listProducts(requestParameters.accountId, requestParameters.companyId, options).then((request) => request(axios, basePath));
        },
        /**
         * Update an existing product for a company
         * @summary Update a product
         * @param {ProductApiUpdateProductRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateProduct(requestParameters: ProductApiUpdateProductRequest, options?: AxiosRequestConfig): AxiosPromise<UpdateProductResponse> {
            return localVarFp.updateProduct(requestParameters.updateProductRequestBody, requestParameters.accountId, requestParameters.companyId, requestParameters.productId, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for createProduct operation in ProductApi.
 * @export
 * @interface ProductApiCreateProductRequest
 */
export interface ProductApiCreateProductRequest {
    /**
     * 
     * @type {CreateProductRequestBody}
     * @memberof ProductApiCreateProduct
     */
    readonly createProductRequestBody: CreateProductRequestBody

    /**
     * Account ID to which the company belongs
     * @type {string}
     * @memberof ProductApiCreateProduct
     */
    readonly accountId: string

    /**
     * Company ID for which to create a product
     * @type {string}
     * @memberof ProductApiCreateProduct
     */
    readonly companyId: string
}

/**
 * Request parameters for deleteProduct operation in ProductApi.
 * @export
 * @interface ProductApiDeleteProductRequest
 */
export interface ProductApiDeleteProductRequest {
    /**
     * 
     * @type {DeleteProductRequest}
     * @memberof ProductApiDeleteProduct
     */
    readonly deleteProductRequest: DeleteProductRequest

    /**
     * Account ID to which the company belongs
     * @type {string}
     * @memberof ProductApiDeleteProduct
     */
    readonly accountId: string

    /**
     * Company ID for which to create a product
     * @type {string}
     * @memberof ProductApiDeleteProduct
     */
    readonly companyId: string

    /**
     * Product ID to delete
     * @type {string}
     * @memberof ProductApiDeleteProduct
     */
    readonly productId: string
}

/**
 * Request parameters for listProducts operation in ProductApi.
 * @export
 * @interface ProductApiListProductsRequest
 */
export interface ProductApiListProductsRequest {
    /**
     * Account ID to which the company belongs
     * @type {string}
     * @memberof ProductApiListProducts
     */
    readonly accountId: string

    /**
     * Company ID for which to list products
     * @type {string}
     * @memberof ProductApiListProducts
     */
    readonly companyId: string
}

/**
 * Request parameters for updateProduct operation in ProductApi.
 * @export
 * @interface ProductApiUpdateProductRequest
 */
export interface ProductApiUpdateProductRequest {
    /**
     * 
     * @type {UpdateProductRequestBody}
     * @memberof ProductApiUpdateProduct
     */
    readonly updateProductRequestBody: UpdateProductRequestBody

    /**
     * Account ID to which the company belongs
     * @type {string}
     * @memberof ProductApiUpdateProduct
     */
    readonly accountId: string

    /**
     * Company ID for which to create a product
     * @type {string}
     * @memberof ProductApiUpdateProduct
     */
    readonly companyId: string

    /**
     * Product ID to update
     * @type {string}
     * @memberof ProductApiUpdateProduct
     */
    readonly productId: string
}

/**
 * ProductApi - object-oriented interface
 * @export
 * @class ProductApi
 * @extends {BaseAPI}
 */
export class ProductApi extends BaseAPI {
    /**
     * Add a new product to a company
     * @summary Add product
     * @param {ProductApiCreateProductRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProductApi
     */
    public createProduct(requestParameters: ProductApiCreateProductRequest, options?: AxiosRequestConfig) {
        return ProductApiFp(this.configuration).createProduct(requestParameters.createProductRequestBody, requestParameters.accountId, requestParameters.companyId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Remove a product from a company.
     * @summary Remove a product
     * @param {ProductApiDeleteProductRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProductApi
     */
    public deleteProduct(requestParameters: ProductApiDeleteProductRequest, options?: AxiosRequestConfig) {
        return ProductApiFp(this.configuration).deleteProduct(requestParameters.deleteProductRequest, requestParameters.accountId, requestParameters.companyId, requestParameters.productId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get all products for a company
     * @summary List products
     * @param {ProductApiListProductsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProductApi
     */
    public listProducts(requestParameters: ProductApiListProductsRequest, options?: AxiosRequestConfig) {
        return ProductApiFp(this.configuration).listProducts(requestParameters.accountId, requestParameters.companyId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Update an existing product for a company
     * @summary Update a product
     * @param {ProductApiUpdateProductRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProductApi
     */
    public updateProduct(requestParameters: ProductApiUpdateProductRequest, options?: AxiosRequestConfig) {
        return ProductApiFp(this.configuration).updateProduct(requestParameters.updateProductRequestBody, requestParameters.accountId, requestParameters.companyId, requestParameters.productId, options).then((request) => request(this.axios, this.basePath));
    }
}
