/* tslint:disable */
/* eslint-disable */
/**
 * Invoice Desk API Documentation
 * Official API documentation for Invoice Desk
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from '../configuration';
import type { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// URLSearchParams not necessarily used
// @ts-ignore
import { URL, URLSearchParams } from 'url';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { CreateClientPayload } from '../models';
// @ts-ignore
import { CreateClientResponse } from '../models';
// @ts-ignore
import { DeleteClientResponse } from '../models';
// @ts-ignore
import { GetClientResponse } from '../models';
// @ts-ignore
import { ListClientsResponse } from '../models';
// @ts-ignore
import { UpdateClientData } from '../models';
// @ts-ignore
import { UpdateClientResponse } from '../models';
/**
 * ClientApi - axios parameter creator
 * @export
 */
export const ClientApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Add a new client to a company
         * @summary Add client
         * @param {CreateClientPayload} createClientPayload 
         * @param {string} accountId Account ID to which the company belongs
         * @param {string} companyId Company ID for which to add a client
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createClient: async (createClientPayload: CreateClientPayload, accountId: string, companyId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'createClientPayload' is not null or undefined
            assertParamExists('createClient', 'createClientPayload', createClientPayload)
            // verify required parameter 'accountId' is not null or undefined
            assertParamExists('createClient', 'accountId', accountId)
            // verify required parameter 'companyId' is not null or undefined
            assertParamExists('createClient', 'companyId', companyId)
            const localVarPath = `/accounts/{accountId}/companies/{companyId}/clients`
                .replace(`{${"accountId"}}`, encodeURIComponent(String(accountId)))
                .replace(`{${"companyId"}}`, encodeURIComponent(String(companyId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(createClientPayload, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Remove a client from a company.
         * @summary Remove client
         * @param {string} accountId Account ID to which the company belongs
         * @param {string} companyId Company ID for which to update a client
         * @param {string} clientId Client ID to update
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteClient: async (accountId: string, companyId: string, clientId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'accountId' is not null or undefined
            assertParamExists('deleteClient', 'accountId', accountId)
            // verify required parameter 'companyId' is not null or undefined
            assertParamExists('deleteClient', 'companyId', companyId)
            // verify required parameter 'clientId' is not null or undefined
            assertParamExists('deleteClient', 'clientId', clientId)
            const localVarPath = `/accounts/{accountId}/companies/{companyId}/clients/{clientId}`
                .replace(`{${"accountId"}}`, encodeURIComponent(String(accountId)))
                .replace(`{${"companyId"}}`, encodeURIComponent(String(companyId)))
                .replace(`{${"clientId"}}`, encodeURIComponent(String(clientId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get details about a specific client, optionally with associated data
         * @summary Get client details
         * @param {string} include Related details of the client to include
         * @param {number} limit The max limit is 100 and it must be a positive number.
         * @param {string} accountId Account ID to which the company belongs
         * @param {string} companyId Company ID for which to update a client
         * @param {string} clientId Client ID to update
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getClient: async (include: string, limit: number, accountId: string, companyId: string, clientId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'include' is not null or undefined
            assertParamExists('getClient', 'include', include)
            // verify required parameter 'limit' is not null or undefined
            assertParamExists('getClient', 'limit', limit)
            // verify required parameter 'accountId' is not null or undefined
            assertParamExists('getClient', 'accountId', accountId)
            // verify required parameter 'companyId' is not null or undefined
            assertParamExists('getClient', 'companyId', companyId)
            // verify required parameter 'clientId' is not null or undefined
            assertParamExists('getClient', 'clientId', clientId)
            const localVarPath = `/accounts/{accountId}/companies/{companyId}/clients/{clientId}`
                .replace(`{${"accountId"}}`, encodeURIComponent(String(accountId)))
                .replace(`{${"companyId"}}`, encodeURIComponent(String(companyId)))
                .replace(`{${"clientId"}}`, encodeURIComponent(String(clientId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (include !== undefined) {
                localVarQueryParameter['include'] = include;
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get all clients for a company.
         * @summary List clients
         * @param {string} accountId Account ID for which to list companies
         * @param {string} companyId Company ID for which to list clients
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listClients: async (accountId: string, companyId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'accountId' is not null or undefined
            assertParamExists('listClients', 'accountId', accountId)
            // verify required parameter 'companyId' is not null or undefined
            assertParamExists('listClients', 'companyId', companyId)
            const localVarPath = `/accounts/{accountId}/companies/{companyId}/clients`
                .replace(`{${"accountId"}}`, encodeURIComponent(String(accountId)))
                .replace(`{${"companyId"}}`, encodeURIComponent(String(companyId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Update an existing client for a company
         * @summary Update a client
         * @param {UpdateClientData} updateClientData 
         * @param {string} accountId Account ID to which the company belongs
         * @param {string} companyId Company ID for which to update a client
         * @param {string} clientId Client ID to update
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateClient: async (updateClientData: UpdateClientData, accountId: string, companyId: string, clientId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'updateClientData' is not null or undefined
            assertParamExists('updateClient', 'updateClientData', updateClientData)
            // verify required parameter 'accountId' is not null or undefined
            assertParamExists('updateClient', 'accountId', accountId)
            // verify required parameter 'companyId' is not null or undefined
            assertParamExists('updateClient', 'companyId', companyId)
            // verify required parameter 'clientId' is not null or undefined
            assertParamExists('updateClient', 'clientId', clientId)
            const localVarPath = `/accounts/{accountId}/companies/{companyId}/clients/{clientId}`
                .replace(`{${"accountId"}}`, encodeURIComponent(String(accountId)))
                .replace(`{${"companyId"}}`, encodeURIComponent(String(companyId)))
                .replace(`{${"clientId"}}`, encodeURIComponent(String(clientId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(updateClientData, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ClientApi - functional programming interface
 * @export
 */
export const ClientApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = ClientApiAxiosParamCreator(configuration)
    return {
        /**
         * Add a new client to a company
         * @summary Add client
         * @param {CreateClientPayload} createClientPayload 
         * @param {string} accountId Account ID to which the company belongs
         * @param {string} companyId Company ID for which to add a client
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createClient(createClientPayload: CreateClientPayload, accountId: string, companyId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CreateClientResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createClient(createClientPayload, accountId, companyId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Remove a client from a company.
         * @summary Remove client
         * @param {string} accountId Account ID to which the company belongs
         * @param {string} companyId Company ID for which to update a client
         * @param {string} clientId Client ID to update
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteClient(accountId: string, companyId: string, clientId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DeleteClientResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteClient(accountId, companyId, clientId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Get details about a specific client, optionally with associated data
         * @summary Get client details
         * @param {string} include Related details of the client to include
         * @param {number} limit The max limit is 100 and it must be a positive number.
         * @param {string} accountId Account ID to which the company belongs
         * @param {string} companyId Company ID for which to update a client
         * @param {string} clientId Client ID to update
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getClient(include: string, limit: number, accountId: string, companyId: string, clientId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetClientResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getClient(include, limit, accountId, companyId, clientId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Get all clients for a company.
         * @summary List clients
         * @param {string} accountId Account ID for which to list companies
         * @param {string} companyId Company ID for which to list clients
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listClients(accountId: string, companyId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ListClientsResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listClients(accountId, companyId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Update an existing client for a company
         * @summary Update a client
         * @param {UpdateClientData} updateClientData 
         * @param {string} accountId Account ID to which the company belongs
         * @param {string} companyId Company ID for which to update a client
         * @param {string} clientId Client ID to update
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateClient(updateClientData: UpdateClientData, accountId: string, companyId: string, clientId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<UpdateClientResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateClient(updateClientData, accountId, companyId, clientId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * ClientApi - factory interface
 * @export
 */
export const ClientApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = ClientApiFp(configuration)
    return {
        /**
         * Add a new client to a company
         * @summary Add client
         * @param {ClientApiCreateClientRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createClient(requestParameters: ClientApiCreateClientRequest, options?: AxiosRequestConfig): AxiosPromise<CreateClientResponse> {
            return localVarFp.createClient(requestParameters.createClientPayload, requestParameters.accountId, requestParameters.companyId, options).then((request) => request(axios, basePath));
        },
        /**
         * Remove a client from a company.
         * @summary Remove client
         * @param {ClientApiDeleteClientRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteClient(requestParameters: ClientApiDeleteClientRequest, options?: AxiosRequestConfig): AxiosPromise<DeleteClientResponse> {
            return localVarFp.deleteClient(requestParameters.accountId, requestParameters.companyId, requestParameters.clientId, options).then((request) => request(axios, basePath));
        },
        /**
         * Get details about a specific client, optionally with associated data
         * @summary Get client details
         * @param {ClientApiGetClientRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getClient(requestParameters: ClientApiGetClientRequest, options?: AxiosRequestConfig): AxiosPromise<GetClientResponse> {
            return localVarFp.getClient(requestParameters.include, requestParameters.limit, requestParameters.accountId, requestParameters.companyId, requestParameters.clientId, options).then((request) => request(axios, basePath));
        },
        /**
         * Get all clients for a company.
         * @summary List clients
         * @param {ClientApiListClientsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listClients(requestParameters: ClientApiListClientsRequest, options?: AxiosRequestConfig): AxiosPromise<ListClientsResponse> {
            return localVarFp.listClients(requestParameters.accountId, requestParameters.companyId, options).then((request) => request(axios, basePath));
        },
        /**
         * Update an existing client for a company
         * @summary Update a client
         * @param {ClientApiUpdateClientRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateClient(requestParameters: ClientApiUpdateClientRequest, options?: AxiosRequestConfig): AxiosPromise<UpdateClientResponse> {
            return localVarFp.updateClient(requestParameters.updateClientData, requestParameters.accountId, requestParameters.companyId, requestParameters.clientId, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for createClient operation in ClientApi.
 * @export
 * @interface ClientApiCreateClientRequest
 */
export interface ClientApiCreateClientRequest {
    /**
     * 
     * @type {CreateClientPayload}
     * @memberof ClientApiCreateClient
     */
    readonly createClientPayload: CreateClientPayload

    /**
     * Account ID to which the company belongs
     * @type {string}
     * @memberof ClientApiCreateClient
     */
    readonly accountId: string

    /**
     * Company ID for which to add a client
     * @type {string}
     * @memberof ClientApiCreateClient
     */
    readonly companyId: string
}

/**
 * Request parameters for deleteClient operation in ClientApi.
 * @export
 * @interface ClientApiDeleteClientRequest
 */
export interface ClientApiDeleteClientRequest {
    /**
     * Account ID to which the company belongs
     * @type {string}
     * @memberof ClientApiDeleteClient
     */
    readonly accountId: string

    /**
     * Company ID for which to update a client
     * @type {string}
     * @memberof ClientApiDeleteClient
     */
    readonly companyId: string

    /**
     * Client ID to update
     * @type {string}
     * @memberof ClientApiDeleteClient
     */
    readonly clientId: string
}

/**
 * Request parameters for getClient operation in ClientApi.
 * @export
 * @interface ClientApiGetClientRequest
 */
export interface ClientApiGetClientRequest {
    /**
     * Related details of the client to include
     * @type {string}
     * @memberof ClientApiGetClient
     */
    readonly include: string

    /**
     * The max limit is 100 and it must be a positive number.
     * @type {number}
     * @memberof ClientApiGetClient
     */
    readonly limit: number

    /**
     * Account ID to which the company belongs
     * @type {string}
     * @memberof ClientApiGetClient
     */
    readonly accountId: string

    /**
     * Company ID for which to update a client
     * @type {string}
     * @memberof ClientApiGetClient
     */
    readonly companyId: string

    /**
     * Client ID to update
     * @type {string}
     * @memberof ClientApiGetClient
     */
    readonly clientId: string
}

/**
 * Request parameters for listClients operation in ClientApi.
 * @export
 * @interface ClientApiListClientsRequest
 */
export interface ClientApiListClientsRequest {
    /**
     * Account ID for which to list companies
     * @type {string}
     * @memberof ClientApiListClients
     */
    readonly accountId: string

    /**
     * Company ID for which to list clients
     * @type {string}
     * @memberof ClientApiListClients
     */
    readonly companyId: string
}

/**
 * Request parameters for updateClient operation in ClientApi.
 * @export
 * @interface ClientApiUpdateClientRequest
 */
export interface ClientApiUpdateClientRequest {
    /**
     * 
     * @type {UpdateClientData}
     * @memberof ClientApiUpdateClient
     */
    readonly updateClientData: UpdateClientData

    /**
     * Account ID to which the company belongs
     * @type {string}
     * @memberof ClientApiUpdateClient
     */
    readonly accountId: string

    /**
     * Company ID for which to update a client
     * @type {string}
     * @memberof ClientApiUpdateClient
     */
    readonly companyId: string

    /**
     * Client ID to update
     * @type {string}
     * @memberof ClientApiUpdateClient
     */
    readonly clientId: string
}

/**
 * ClientApi - object-oriented interface
 * @export
 * @class ClientApi
 * @extends {BaseAPI}
 */
export class ClientApi extends BaseAPI {
    /**
     * Add a new client to a company
     * @summary Add client
     * @param {ClientApiCreateClientRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ClientApi
     */
    public createClient(requestParameters: ClientApiCreateClientRequest, options?: AxiosRequestConfig) {
        return ClientApiFp(this.configuration).createClient(requestParameters.createClientPayload, requestParameters.accountId, requestParameters.companyId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Remove a client from a company.
     * @summary Remove client
     * @param {ClientApiDeleteClientRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ClientApi
     */
    public deleteClient(requestParameters: ClientApiDeleteClientRequest, options?: AxiosRequestConfig) {
        return ClientApiFp(this.configuration).deleteClient(requestParameters.accountId, requestParameters.companyId, requestParameters.clientId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get details about a specific client, optionally with associated data
     * @summary Get client details
     * @param {ClientApiGetClientRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ClientApi
     */
    public getClient(requestParameters: ClientApiGetClientRequest, options?: AxiosRequestConfig) {
        return ClientApiFp(this.configuration).getClient(requestParameters.include, requestParameters.limit, requestParameters.accountId, requestParameters.companyId, requestParameters.clientId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get all clients for a company.
     * @summary List clients
     * @param {ClientApiListClientsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ClientApi
     */
    public listClients(requestParameters: ClientApiListClientsRequest, options?: AxiosRequestConfig) {
        return ClientApiFp(this.configuration).listClients(requestParameters.accountId, requestParameters.companyId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Update an existing client for a company
     * @summary Update a client
     * @param {ClientApiUpdateClientRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ClientApi
     */
    public updateClient(requestParameters: ClientApiUpdateClientRequest, options?: AxiosRequestConfig) {
        return ClientApiFp(this.configuration).updateClient(requestParameters.updateClientData, requestParameters.accountId, requestParameters.companyId, requestParameters.clientId, options).then((request) => request(this.axios, this.basePath));
    }
}
